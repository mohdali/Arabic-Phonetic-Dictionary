package com.mohdali.apd.lib;
import java.util.ArrayList;
import java.util.Map;

/**
 * <p>
 * A PhoneticDictionaryEntry consists of a Key and one or more Definitions. The
 * Key is a word from the text corpus, while each definition is a phonetic
 * pronuncation generated by the rules.
 * </p>
 * <p>
 * The list of entries and their definitions are expanded to generate the
 * dictionary file used by CMUSphinx.
 * </p>
 * <p>
 * For further information please check the CMUSphinx Tutorial
 * <a href="https://cmusphinx.github.io/wiki/tutorialdict/">Building a Phonetic
 * Dictionary</a>.
 * </p>
 * 
 * @author Mohamed Ali
 */
public class PhoneticDictionaryEntry implements Comparable<PhoneticDictionaryEntry> {

    private String key;
    private ArrayList<String> definitions;

    private Map<String, String> classes = RuleEngine.getCharClasses();
    
    public PhoneticDictionaryEntry(String key) {
        this.key = key;
        definitions = new ArrayList<String>();
    }

    public String getKey() {
        return key;
    }

    public ArrayList<String> getDefinitions() {
        return definitions;
    }

    public void setDefinitions(ArrayList<String> defs) {
        this.definitions = defs;
    }

    public boolean isValid() {
        String c = key.substring(0, 1);
        return (removeDiacritics().length() > 0 && !c.matches(classes.get("D")));
    }

    private String removeDiacritics() {
        return key.replaceAll(classes.get("D"), "");
    }

    public void addDefinition(String def) {
        definitions.add(def.trim());
    }

    @Override
    public int compareTo(PhoneticDictionaryEntry o) {
        return key.compareTo(o.getKey());
    }

    @Override
    public boolean equals(Object o) {
        if (o instanceof PhoneticDictionaryEntry) {
            PhoneticDictionaryEntry e = (PhoneticDictionaryEntry) o;
            return key.equals(e.getKey());
        } else
            return false;
    }

    @Override
    public String toString() {
        int count = 0;
        String out = "";

        for (String def : definitions) {
            count++;
            if (count == 1)
                out += String.format("%s %s\n", key, def);
            else
                out += String.format("%s(%d) %s\n", key, count, def);
        }

        return out;
    }
}
